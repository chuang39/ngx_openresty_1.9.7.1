
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  logs/error.log  warn;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

worker_rlimit_nofile 655350;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_package_path "/home/user/ansible/nginx/ngx_openresty-1.9.3.2/bundle/lua-bid-proxy/lib/?.lua;;";
    init_worker_by_lua_block {
        local log = ngx.log
        local ERR = ngx.ERR
        local NOTICE = ngx.NOTICE

        local dp = require "resty.bid_proxy.dispatcher"
        local mn = require "resty.bid_proxy.monitor"

        mn.init()

        upstream_list = {
            "127.0.0.1",   -- nhproxy1
            --"38.111.30.9", -- nhproxy2
            --"38.111.30.36",
            --"38.111.30.37",
            --"38.111.30.38",
            --"38.111.30.39",
            --"38.111.30.40",
            --"38.111.30.41",
            --"38.111.30.42",
            --"38.111.30.43",
            --"38.111.30.44",
            --"38.111.30.45",
            --"38.111.30.46",
            --"38.111.30.47",
        }

        for i,val in ipairs(upstream_list) do
            local index = dp.init_queue()
            dp.spawn_dispatcher(val, index)
        end
    }


    server {
        listen       443 ssl;
        server_name  localhost
            nexage.fractionalmedia.com
            mopub.fractionalmedia.com
            dev.fractionalmedia.com;

        #ssl on;
        ssl_certificate             /home/user/certs2/star_fractionalmedia_com.pem;
        ssl_certificate_key         /home/user/certs2/star_fractionalmedia_com.key;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location = /request {
            client_max_body_size 50k;
            client_body_buffer_size 50k;

            content_by_lua_block {
                local cjson = require "cjson"
                local dp = require "resty.bid_proxy.dispatcher"
                local mn = require "resty.bid_proxy.monitor"

                local log = ngx.log
                local ERR = ngx.ERR
                local WARN = ngx.WARN
                local NOTICE = ngx.NOTICE
                local INFO = ngx.INFO

                mn.increment_total()

                -- get host of the request
                local host = dp.get_ssp(ngx.var.host)
                if not host then
                    mn.increment_invalid()
                    ngx.status = 204
                    ngx.header.content_type = 'text/html'
                    ngx.say("")
                    return
                end

                -- explicitly read the req body
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if not data then
                    mn.increment_invalid()
                    ngx.status = 204
                    ngx.header.content_type = 'text/html'
                    ngx.say("")
                    return
                end

                --local output = cjson.decode(data)
                local output = dp.decoder:decode(data)
                local fmid = dp.get_fmid(host, output) 

                if fmid ~= nil then
                    mn.increment_valid()

                    local shard_id = dp.shard(fmid)
                    shard_id = 1    -- TODO: remove
                    local node, err = dp.insert_req(fmid, shard_id, host, data)
                    if node == nil then
                        mn.increment_nobid()
                        log(NOTICE, "Handler: queue insertion failed")
                        ngx.status = 204
                        ngx.header.content_type = 'text/html'
                        ngx.say("")
                        return
                    end

                    local res, err = dp.p(node.semaphore)
                    if not res then
                        mn.increment_timedout()
                        log(INFO, " Handler TIMES OUT for  requestid=", node.requestid, "  nodeid=", node.nodeid, "  sema=", node.semaphore:count())
                        dp.free_req(shard_id, node)
                        ngx.status = 204
                        ngx.header.content_type = 'text/html'
                        ngx.say("")  -- empty body
                        return
                    end

                    if node.response ~= nil then
                        mn.increment_bid()
                        ngx.header.content_type = 'application/json'
                        --log(WARN, node.response)
                        ngx.say(node.response)
                    else
                        ngx.header.content_type = 'text/html'
                        ngx.say("")  -- empty body
                    end
                    dp.free_req(shard_id, node)
                    return
                else
                    mn.increment_invalid()
                    log(NOTICE, "[Error] Handler: no id was found")
                    ngx.status = 204
                    ngx.header.content_type = 'text/html'
                    ngx.say("")
                    return
                end
             }
         }

    location ~ win2_notice_bin$ {
        root    /var/www/;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass   unix:/var/run/win2_notice.socket;
    }

    location ~ track_img_bin$ {
        root    /var/www/;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass   unix:/var/run/track_img.socket;
    }

    location ~ click2_bin$ {
        root    /var/www/;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass   unix:/var/run/click2.socket;
    }

    location ~ click_generic_bin$ {
        root    /var/www/;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass   unix:/var/run/click_generic.socket;
    }

    location ~ click_generic_bin$ {
        root    /var/www/;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass   unix:/var/run/click_generic.socket;
    }


    location ~ conversion_bin$ {
        root    /var/www/;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass   unix:/var/run/conversion.socket;
    }

    location ~ notify_bin$ {
        root    /var/www/;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass   unix:/var/run/notify.socket;
    }


    # Conversions
    location /conversion_v1_bin {
                resolver        66.28.0.45;
                set $my_url "false";

                        # Send to origin node
                        if ($args ~ bid_id=(.*)__([\d]*)) {
                                        set $my_url "http://node$2.fractionalmedia.com/conversion_bin?$args";
                        }

                        # Conversions we can't claim (MachineZone) go to node1
                        if ($args ~ can_claim=0) {
                                        set $my_url "http://node1.fractionalmedia.com/conversion_bin?$args";
                        }

                # Conversion requests without proper querystring parameters are denied
                if ($my_url = false) {
                        return 404;
                }

                proxy_pass $my_url;
    }

        location /conversion_v2_bin {
                resolver        66.28.0.45;
                set $my_url "false";

                        # Send to origin node
                        if ($args ~ bid_id=(.*)__([\d]*)) {
                                        set $my_url "http://node$2.fractionalmedia.com/conversion_bin?$args";
                        }

                        # Conversions we can't claim (MachineZone) go to node1
                        if ($args ~ can_claim=0) {
                                        set $my_url "http://node1.fractionalmedia.com/conversion_bin?$args";
                        }

                # Conversion requests without proper querystring parameters are denied
                if ($my_url = false) {
                        return 404;
                }

                proxy_pass $my_url;
    }


        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
